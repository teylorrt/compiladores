{
   "comment": "JSON C Parser",
   // JavaScript comments also work

   "lex": {
      // "rules": [
      //    ["\\s+",                    "/* skip whitespace */"],
      //    ["[0-9]+(?:\\.[0-9]+)?\\b", "return 'NUMBER'"],
      //    ["\\*",                     "return '*'"],
      //    ["\\/",                     "return '/'"],
      //    ["-",                       "return '-'"],
      //    ["\\+",                     "return '+'"],
      //    ["\\^",                     "return '^'"],
      //    ["!",                       "return '!'"],
      //    ["%",                       "return '%'"],
      //    ["\\(",                     "return '('"],
      //    ["\\)",                     "return ')'"],
      //    ["PI\\b",                   "return 'PI'"],
      //    ["E\\b",                    "return 'E'"],
      //    ["$",                       "return 'EOF'"]
      // ]
      "rules": [
         ["\\s+"                              ,"/* skip whitespace */"],
         ["int"                               ,"console.log('Token INT'); return 'INT'"],
         ["double"                            ,"console.log('Token DOUBLE'); return 'DOUBLE'"],
         ["float"                             ,"console.log('Token FLOAT'); return 'FLOAT'"],
         ["char"                              ,"console.log('Token CHAR'); return 'CHAR'"],
         ["("                                 ,"console.log('Token LEFT_PARENTHESES' ); return 'LEFT_PARENTHESES'"],
         [")"                                 ,"console.log('Token RIGHT_PARENTHESES' ); return 'RIGHT_PARENTHESES'"],
         [";"                                 ,"console.log('Token SEMICOLON'); return 'SEMICOLON'"],
         [":"                                 ,"console.log('Token COLON'); return 'COLON'"],
         ["."                                 ,"console.log('Token DOT'); return 'DOT'"],
         [","                                 ,"console.log('Token COMMA'); return 'COMMA'"],
         ["'"                                 ,"console.log('Token QUOTE'); return 'QUOTE'"],
         ["\""                                ,"console.log('Token DQUOTE'); return 'DQUOTE'"],
         ["["                                 ,"console.log('Token LEFT_BRACKET'); return 'LEFT_BRACKET'"],
         ["]"                                 ,"console.log('Token RIGHT_BRACKET'); return 'RIGHT_BRACKET'"],
         ["{"                                 ,"console.log('Token LEFT_COTTAR'); return 'LEFT_COTTAR'"],
         ["}"                                 ,"console.log('Token RIGHT_COTTAR'); return 'RIGHT_COTTAR'"],
         ["<="                                ,"console.log('Token LESS_EQUAL'); return 'LESS_EQUAL'"],
         [">="                                ,"console.log('Token GREATER_EQUAL'); return 'GREATER_EQUAL'"],
         ["=="                                ,"console.log('Token EQUAL'); return 'EQUAL'"],
         ["!="                                ,"console.log('Token NOT_EQUAL'); return 'NOT_EQUAL'"],
         ["+="                                ,"console.log('Token ADD_EQUAL'); return 'ADD_EQUAL'"],
         ["-="                                ,"console.log('Token SUB_EQUAL'); return 'SUB_EQUAL'"],
         ["*="                                ,"console.log('Token MULT_EQUAL'); return 'MULT_EQUAL'"],
         ["/="                                ,"console.log('Token DIV_EQUAL'); return 'DIV_EQUAL'"],
         ["<"                                 ,"console.log('Token LESS'); return 'LESS'"],
         [">"                                 ,"console.log('Token GREATER'); return 'GREATER'"],
         ["="                                 ,"console.log('Token ATTR'); return 'ATTR'"],
         ["*"                                 ,"console.log('Token MULT'); return 'MULT'"],
         ["+"                                 ,"console.log('Token ADD'); return 'ADD'"],
         ["-"                                 ,"console.log('Token SUB'); return 'SUB'"],
         ["/"                                 ,"console.log('Token DIV'); return 'DIV'"],
         ["||"                                ,"console.log('Token OR'); return 'OR'"],
         ["!"                                 ,"console.log('Token NOT'); return 'NOT'"],
         ["&&"                                ,"console.log('Token AND'); return 'AND'"],
         ["if"                                ,"console.log('Token IF'); return 'IF'"],
         ["while"                             ,"console.log('Token WHILE'); return 'WHILE'"],
         ["switch"                            ,"console.log('Token SWITCH'); return 'SWITCH'"],
         ["case"                              ,"console.log('Token CASE'); return 'CASE'"],
         ["break"                             ,"console.log('Token BREAK'); return 'BREAK'"],
         ["default"                           ,"console.log('Token DEFAULT'); return 'DEFAULT'"],
         ["else"                              ,"console.log('Token ELSE'); return 'ELSE'"],
         ["do while"                          ,"console.log('Token DOWHILE'); return 'DOWHILE'"],
         ["#"                                 ,"console.log('Token HASHTAG'); return 'HASHTAG'"],
         ["define"                            ,"console.log('Token DEFINE'); return 'DEFINE'"],
         ["[a-zA-Z][a-zA-Z0-9_]*"               ,"console.log('Token IDENTIFIER', yytext); return 'IDENTIFIER'"],
         ["[0-9]*\\.[0-9]+([eE][+-][0-9]+)?"     ,"console.log('Token FLOAT_LITERAL', yytext); return 'FLOAT_LITERAL'"],
         ["[0-9]+"                              ,"console.log('Token INT_LITERAL', yytext); return 'INT_LITERAL'"],
         ["."                                   ,"console.log('Erro léxico: caractere [', yytext, '] não reconhecido.')"],
         ["$"                             ,"return 'EOF'"]
      ]
   },

   "operators": [
      ["left", "+", "-"],
      ["left", "*", "/"],
      ["left", "^"],
      ["right", "!"],
      ["right", "%"],
      ["left", "UMINUS"]
   ],

   "bnf": {
      "expressions": [
         ["e EOF",   "return $1"]
      ],

      "e" :[
         // ["e + e",  "$$ = $1+$3"],
         // ["e - e",  "$$ = $1-$3"],
         // ["e * e",  "$$ = $1*$3"],
         // ["e / e",  "$$ = $1/$3"],
         // ["e ^ e",  "$$ = Math.pow($1, $3)"],
         // ["e !",    "$$ = (function(n) {if(n==0) return 1; return arguments.callee(n-1) * n})($1)"],
         // ["e %",    "$$ = $1/100"],
         // ["- e",    "$$ = -$2", {"prec": "UMINUS"}],
         // ["( e )",  "$$ = $2"],
         // ["NUMBER", "$$ = Number(yytext)"],
         // ["E",      "$$ = Math.E"],
         // ["PI",     "$$ = Math.PI"]
         ["INT",  "return $1;"],
         ["DOUBLE",  "return $1;"],
         ["FLOAT",  "return $1;"],
         ["CHAR",  "return $1;"],
         ["LEFT_PARENTHESES",  "return $1;"],
         ["RIGHT_PARENTHESES",  "return $1;"],
         ["SEMICOLON",  "return $1;"],
         ["COLON",  "return $1;"],
         ["DOT",  "return $1;"],
         ["COMMA",  "return $1;"],
         ["QUOTE",  "return $1;"],
         ["DQUOTE",  "return $1;"],
         ["LEFT_BRACKET",  "return $1;"],
         ["RIGHT_BRACKET",  "return $1;"],
         ["LEFT_COTTAR",  "return $1;"],
         ["RIGHT_COTTAR",  "return $1;"],
         ["LESS_EQUAL",  "return $1;"],
         ["GREATER_EQUAL",  "return $1;"],
         ["EQUAL",  "return $1;"],
         ["NOT_EQUAL",  "return $1;"],
         ["ADD_EQUAL",  "return $1;"],
         ["SUB_EQUAL",  "return $1;"],
         ["MULT_EQUAL",  "return $1;"],
         ["DIV_EQUAL",  "return $1;"],
         ["LESS",  "return $1;"],
         ["GREATER",  "return $1;"],
         ["ATTR",  "return $1;"],
         ["MULT",  "return $1;"],
         ["ADD",  "return $1;"],
         ["SUB",  "return $1;"],
         ["DIV",  "return $1;"],
         ["OR",  "return $1;"],
         ["NOT",  "return $1;"],
         ["AND",  "return $1;"],
         ["IF",  "return $1;"],
         ["WHILE",  "return $1;"],
         ["SWITCH",  "return $1;"],
         ["CASE",  "return $1;"],
         ["BREAK",  "return $1;"],
         ["DEFAULT",  "return $1;"],
         ["ELSE",  "return $1;"],
         ["DOWHILE",  "return $1;"],
         ["HASHTAG",  "return $1;"],
         ["DEFINE",  "return $1;"],
         ["IDENTIFIER",  "return $1;"],
         ["FLOAT_LITERAL",  "return $1;"],
         ["INT_LITERAL",  "return $1;"],
         ["INT_LITERAL",  "return $1;"]
      ]
   }
}
