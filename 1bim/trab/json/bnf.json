{
      "expressions": [
         ["programa EOF",   "return $1;"]
      ],
      "include": [
         ["INCLUDE LESS LIB GREATER", ""],
         ["INCLUDE STRING", ""]
      ],
      "listaInclude": [
         ["include", ""],
         ["include listaInclude", ""]
      ],
      "define": [
         ["DEFINE IDENTIFIER valorLiteral ;", ""],
         ["DEFINE IDENTIFIER STRING ;", ""]
      ],
      "listaDefine": [
         ["define", ""],
         ["define listaDefine", ""]
      ],
      "funcaoReservada": [
         ["printf", ""],
         ["scanf", ""],
         ["system", ""]
      ],
      "printf": [
         ["PRINTF ( STRING )", ""],
         ["PRINTF ( STRING , listaIdentificador )", ""]
      ],
      "scanf": [
         ["SCANF ( STRING , ADDRESS IDENTIFIER )", ""]
      ],
      "system": [
         ["SYSTEM ( STRING )", ""]
      ],
      "tipo": [
         ["INT",  ""],
         ["FLOAT",  ""],
         ["CHAR",  ""]
      ],
      "valorLiteral": [
         ["FLOAT_LITERAL",  "Jison.inserirPreInseridos({lexema: $1, token: 'FLOAT_LITERAL', valor: $1, tipo: 'float'});"],
         ["INT_LITERAL",  "Jison.inserirPreInseridos({lexema: $1, token: 'INT_LITERAL', valor: $1, tipo: 'int'});"],
         ["CHAR_LITERAL",  "Jison.inserirPreInseridos({lexema: $1, token: 'CHAR_LITERAL', valor: $1, tipo: 'char'});"]
      ],
      "listaIdentificador": [
         ["IDENTIFIER", "Jison.simbolosPreInseridos.push({lexema: $1, token: 'IDENTIFIER', valor: null});"],
         ["IDENTIFIER , listaIdentificador", ""]
      ],
      "listaIdentificadorValor": [
         ["atribuicao", ""],
         ["atribuicao , listaIdentificadorValor", ""]
      ],
      "declaracaoVariavel": [
         ["tipo listaIdentificadorValor ;", "Jison.inserirSimbolos($1);"],
         ["tipo listaIdentificador ;", "Jison.inserirSimbolos($1);"]
      ],
      "case": [
         ["CASE valor : listaComando BREAK ;", ""],
         ["CASE valor : listaComando return", ""],
         ["CASE valor : return", ""]
      ],
      "defaultSwitch":[
         ["DEFAULT : listaComando BREAK ;", ""],
         ["DEFAULT : listaComando return", ""],
         ["DEFAULT : return", ""]
      ],
      "listaCase": [
         ["case", ""],
         ["listaCase case", ""]
      ],
      "operadorCondicional": [
         ["NOT", ""],
         ["AND", ""],
         ["OR", ""]
      ],
      "operadorComparacao": [
         ["LESS_EQUAL", ""],
         ["GREATER_EQUAL", ""],
         ["EQUAL", ""],
         ["NOT_EQUAL", ""],
         ["LESS", ""],
         ["GREATER", ""]
      ],
      "valor": [
         ["IDENTIFIER", "$$ = {oper: 'ID', value: $1};"],
         ["valorLiteral", "$$ = {oper: 'LIT', value: $1};"],
         [ "valor ADD valor",   "$$ = {oper: 'ADD', left: $1, right: $3};" ],
         [ "valor SUB valor",   "$$ = {oper: 'SUB', left: $1, right: $3};" ],
         [ "valor MULT valor",   "$$ = {oper: 'MULT', left: $1, right: $3};" ],
         [ "valor DIV valor",   "$$ = {oper: 'DIV', left: $1, right: $3};" ],
         [ "valor MOD valor",   "$$ = {oper: 'MOD', left: $1, right: $3};" ],
         [ "( valor )",   "" ]
      ],
      "chamadaFuncao": [
         ["IDENTIFIER ( )", ""],
         ["IDENTIFIER ( listaIdentificador )", ""]
      ],
      "atribuicao": [
         ["IDENTIFIER ATTR valor", "Jison.inserirPreInseridos({lexema: $1, token: 'IDENTIFIER', valor: $3});"],
         ["IDENTIFIER ADD_ATTR valor", ""],
         ["IDENTIFIER SUB_ATTR valor", ""],
         ["IDENTIFIER MULT_ATTR valor", ""],
         ["IDENTIFIER DIV_ATTR valor", ""],
         ["IDENTIFIER ADDADD", ""],
         ["IDENTIFIER SUBSUB", ""]
      ],
      "comando": [
         ["declaracaoVariavel", ""],
         ["condicional", ""],
         ["iteracao", ""],
         ["chamadaFuncao ;", ""],
         ["atribuicao ;", ""],
         ["funcaoReservada ;", ""]
      ],
      "listaComando": [
         ["comando", ""],
         ["listaComando comando", ""]
      ],
      "return": [
         ["RETURN valor ;", ""],
         ["RETURN ;", ""]
      ],
      "condicao": [
         ["valor", ""],
         ["valor operadorComparacao valor", ""],
         ["NOT valor", ""]
      ],
      "listaCondicao":[
         ["condicao", ""],
         ["condicao operadorCondicional listaCondicao", ""],
         ["( listaCondicao )", ""]
      ],
      "condicional": [
         ["if", ""],
         ["switch", ""]
      ],
      "if": [
         ["IF ( listaCondicao ) comando", ""],
         ["IF ( listaCondicao ) return", ""],
         ["IF ( listaCondicao ) blocoExecucao", ""],
         ["IF ( listaCondicao ) comando else", ""],
         ["IF ( listaCondicao ) return else", ""],
         ["IF ( listaCondicao ) blocoExecucao else", ""]
      ],
      "else": [
         ["ELSE comando", ""],
         ["ELSE return", ""],
         ["ELSE blocoExecucao", ""]
      ],
      "switch": [
         ["SWITCH ( valor ) blocoSwitch", ""]
      ],
      "blocoSwitch": [
         ["{ defaultSwitch }", ""],
         ["{ listaCase }", ""],
         ["{ listaCase defaultSwitch }", ""]
      ],
      "iteracao": [
         ["for", ""],
         ["while", ""],
         ["doWhile", ""]
      ],
      "for": [
         ["FOR ( declaracaoVariavel listaCondicao ; atribuicao ) ;", ""],
         ["FOR ( declaracaoVariavel listaCondicao ; atribuicao ) ;", ""],
         ["FOR ( atribuicao ; listaCondicao ; atribuicao ) ;", ""],
         ["FOR ( atribuicao ; listaCondicao ; atribuicao ) ;", ""],
         ["FOR ( declaracaoVariavel listaCondicao ; atribuicao ) comando", ""],
         ["FOR ( declaracaoVariavel listaCondicao ; atribuicao ) blocoExecucao", ""],
         ["FOR ( atribuicao ; listaCondicao ; atribuicao ) comando", ""],
         ["FOR ( atribuicao ; listaCondicao ; atribuicao ) blocoExecucao", ""]
      ],
      "while": [
         ["WHILE ( listaCondicao ) ;", ""],
         ["WHILE ( listaCondicao ) comando", ""],
         ["WHILE ( listaCondicao ) blocoExecucao", ""]
      ],
      "doWhile": [
         ["DO comando WHILE ( listaCondicao ) ;", ""],
         ["DO blocoExecucao WHILE ( listaCondicao ) ;", ""]
      ],
      "blocoExecucao": [
         ["{ }", ""],
         ["{ return }", ""],
         ["{ listaComando }", ""],
         ["{ listaComando return }", ""]
      ],
      "listaParametro": [
         ["tipo IDENTIFIER", "Jison.simbolosPreInseridos.push({lexema: $2, token: 'IDENTIFIER', tipo: $1, valor: null});"],
         ["tipo IDENTIFIER , listaParametro", "Jison.simbolosPreInseridos.push({lexema: $2, token: 'IDENTIFIER', tipo: $1, valor: null});"]
      ],
      "funcao": [
         ["cabecalhoFuncao blocoExecucao", "Jison.atualizarEscopos();"]
      ],
      "listaFuncao": [
         ["funcao", ""],
         ["funcao listaFuncao", ""]
      ],
      "cabecalhoFuncao": [
         ["tipo IDENTIFIER ( VOID )", ""],
         ["VOID IDENTIFIER ( VOID )", ""],
         ["tipo IDENTIFIER ( listaParametro )", ""],
         ["VOID IDENTIFIER ( listaParametro )", ""]
      ],
      "prototipoFuncao": [
         ["cabecalhoFuncao ;", ""]
      ],
      "listaPrototipoFuncao": [
         ["prototipoFuncao", ""],
         ["prototipoFuncao listaPrototipoFuncao", ""]
      ],
      "programa": [
         ["listaInclude listaFuncao", "Jison.analiseSemantica(); return $$;"],
         ["listaInclude listaDefine listaFuncao", "Jison.analiseSemantica(); return $$;"]
      ]
   }